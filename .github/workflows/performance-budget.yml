name: Performance Budget Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  performance-budget:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run bundle analysis
      run: npm run build:analyze
      continue-on-error: true
      
    - name: Check performance budget
      run: node scripts/performance-budget-check.js
      continue-on-error: true
      
    - name: Check if performance report exists
      id: check-report
      run: |
        if [ -f "performance-budget-report.json" ]; then
          echo "report-exists=true" >> $GITHUB_OUTPUT
        else
          echo "report-exists=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Upload performance report
      if: steps.check-report.outputs.report-exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.run_number }}
        path: |
          build/stats.html
          performance-budget-report.json
        retention-days: 30
          
    - name: Comment PR with performance report
      if: github.event_name == 'pull_request' && steps.check-report.outputs.report-exists == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = JSON.parse(fs.readFileSync('performance-budget-report.json', 'utf8'));
            
            // Calculate total sizes from budget results if available
            let totalJSSize = 0;
            let totalCSSSize = 0;
            let totalSize = 0;
            
            if (report.budgetResults && report.budgetResults.length > 0) {
              const jsResult = report.budgetResults.find(r => r.name === 'JavaScript Size');
              const cssResult = report.budgetResults.find(r => r.name === 'CSS Size');
              const totalResult = report.budgetResults.find(r => r.name === 'Total Bundle Size');
              
              totalJSSize = jsResult ? jsResult.actual : 0;
              totalCSSSize = cssResult ? cssResult.actual : 0;
              totalSize = totalResult ? totalResult.actual : 0;
            }
            
            const budgetStatus = report.budgetResults && report.budgetResults.length > 0 
              ? report.budgetResults.map(result => {
                  const status = result.status === 'passed' ? '‚úÖ' : 
                                result.status === 'critical' ? 'üö®' : '‚ö†Ô∏è';
                  return `- **${result.name}**: ${status} ${result.actual} KB (budget: ${result.budget} KB)`;
                }).join('\n')
              : '- No budget results available';
            
            const recommendations = report.recommendations && report.recommendations.length > 0
              ? report.recommendations.map(rec => `- ${rec}`).join('\n')
              : '- No specific recommendations at this time';
            
            const overallStatus = report.summary.critical > 0 ? 'üö® Critical Issues' :
                                 report.summary.failed > 0 ? '‚ö†Ô∏è Warnings' : '‚úÖ All Good';
            
            const comment = `## üìä Performance Budget Report
            
            **Overall Status**: ${overallStatus}
            
            ### Bundle Size Analysis
            - **JavaScript Size**: ${totalJSSize} KB
            - **CSS Size**: ${totalCSSSize} KB  
            - **Total Bundle Size**: ${totalSize} KB
            
            ### Budget Status
            ${budgetStatus}
            
            ### Summary
            - ‚úÖ Passed: ${report.summary.passed}
            - ‚ö†Ô∏è Failed: ${report.summary.failed}
            - üö® Critical: ${report.summary.critical}
            
            ### Recommendations
            ${recommendations}
            
            ---
            üìÑ [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ‚è∞ Generated at: ${new Date().toISOString()}
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('‚úÖ Performance report comment posted successfully');
            
          } catch (error) {
            console.error('‚ùå Error posting performance report:', error);
            
            // Post a fallback comment
            const fallbackComment = `## üìä Performance Budget Check
            
            ‚ö†Ô∏è Performance budget check completed, but there was an issue generating the detailed report.
            
            Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
            
            Generated at: ${new Date().toISOString()}
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fallbackComment
            });
          }
          
    - name: Fail workflow if critical budget exceeded
      if: steps.check-report.outputs.report-exists == 'true'
      run: |
        if [ -f "performance-budget-report.json" ]; then
          CRITICAL_COUNT=$(node -e "
            const report = require('./performance-budget-report.json');
            console.log(report.summary.critical || 0);
          ")
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical performance budget exceeded! ($CRITICAL_COUNT critical issues)"
            exit 1
          else
            echo "‚úÖ Performance budget check passed"
          fi
        fi